#!/system/bin/sh
# ==============================================================
# ==============================================================
# ==============================================================
#                       JellyBOOM v4
# ==============================================================
# ==============================================================
# ==============================================================

L="log -p i -t cm"
log -p i -t start
sysctl -p
sync;
setprop cm.filesystem.ready 1;
busybox cp /system/vendor/firmware/SlimISP_GD.bin /data/cfw/SlimISP_GD.bin
busybox cp /system/vendor/firmware/SlimISP_ZD.bin /data/cfw/SlimISP_ZD.bin
busybox chown system /data/cfw/*
busybox chgrp media /data/cfw/*
busybox chmod 0775 /data/cfw/*

if busybox [ ! -f /system/etc/liberty.cfg ]; then
	busybox mount -o remount,rw /system
	cat > /system/etc/liberty.cfg << EOF
SD_BOOST_AT_BOOT=0
READ_AHEAD_KB=2048
ENABLE_CRON=1
FIX_PERMISSIONS_AT_BOOT=0
ZIPALIGN_AT_BOOT=1
REMOVE_CACHE=0
ENABLE_SYSCTL=1
FREE_MEM_AT_BOOT=1
# MEMORY THRESHOLDS
FOREGROUND_APP_MEM=2048
VISIBLE_APP_MEM=3072
PERCEPTIBLE_APP_MEM=4096
HEAVY_WEIGHT_APP_MEM=4096
SECONDARY_SERVER_MEM=6144
BACKUP_APP_MEM=6144
HOME_APP_MEM=6144
HIDDEN_APP_MEM=7168
EMPTY_APP_MEM=8192
EOF
busybox mount -o remount,ro /system
fi
if busybox [ ! -f /system/etc/init_trigger.enabled ]; then
	busybox mount -o remount,rw /system
	cat > /system/etc/liberty.cfg << EOF
SD_BOOST_AT_BOOT=0
READ_AHEAD_KB=2048
ENABLE_CRON=0
FIX_PERMISSIONS_AT_BOOT=0
ZIPALIGN_AT_BOOT=1
REMOVE_CACHE=0
ENABLE_SYSCTL=0
FREE_MEM_AT_BOOT=0
# MEMORY THRESHOLDS
FOREGROUND_APP_MEM=2048
VISIBLE_APP_MEM=3072
PERCEPTIBLE_APP_MEM=4096
HEAVY_WEIGHT_APP_MEM=4096
SECONDARY_SERVER_MEM=6144
BACKUP_APP_MEM=6144
HOME_APP_MEM=6144
HIDDEN_APP_MEM=7168
EMPTY_APP_MEM=8192
EOF
busybox mount -o remount,ro /system
fi

if busybox [ $FREE_MEM_AT_BOOT -eq 1 ]; then

	busybox echo $FOREGROUND_APP_MEM,$VISIBLE_APP_MEM,$PERCEPTIBLE_APP_MEM,$SECONDARY_SERVER_MEM,$HIDDEN_APP_MEM,$EMPTY_APP_MEM > /sys/module/lowmemorykiller/parameters/minfree

	setprop ro.FOREGROUND_APP_MEM $FOREGROUND_APP_MEM
	setprop ro.VISIBLE_APP_MEM $VISIBLE_APP_MEM
	setprop ro.PERCEPTIBLE_APP_MEM $PERCEPTIBLE_APP_MEM
	setprop ro.HEAVY_WEIGHT_APP_MEM $HEAVY_WEIGHT_APP_MEM
	setprop ro.SECONDARY_SERVER_MEM $SECONDARY_SERVER_MEM
	setprop ro.BACKUP_APP_MEM $BACKUP_APP_MEM
	setprop ro.HOME_APP_MEM $HOME_APP_MEM
	setprop ro.HIDDEN_APP_MEM $HIDDEN_APP_MEM
	setprop ro.EMPTY_APP_MEM $EMPTY_APP_MEM

	RAM_FREE=` busybox expr $EMPTY_APP_MEM \* 4 / 1024 `
	log -p i -t boot "Set ${RAM_FREE}mb of RAM free."

fi

if busybox [ $ENABLE_CRON -eq 1 -a -n "$( busybox | busybox grep crond )" ]; then
	
	# crond has "/bin/sh" hardcoded
	mount -o remount,rw rootfs /
	if busybox [ ! -L /bin ]; then
		ln -s /system/bin/ /bin
	fi
	mount -o remount,ro rootfs /
	
	# set timezone (if you're not between -0500 and -0800 you get PST)
	# todo - support other timezones
	timezone=`date +%z`
	if busybox [ $timezone = "-0800" ]; then
	  TZ=PST8PDT
	elif busybox [ $timezone = "-0700" ]; then
	  TZ=MST7MDT
	elif busybox [ $timezone = "-0600" ]; then
	  TZ=CST6CDT
	elif busybox [ $timezone = "-0500" ]; then
	  TZ=EST5EDT
	else
		TZ=PST8PDT
	fi
	export TZ
	
	# use /data/cron, call the crontab file "root"
	if busybox [ ! -d /data/cron ]; then
		busybox mkdir -p /data/cron
		cat > /data/cron/root << EOF
# run-parts
01 * * * * busybox run-parts /system/etc/cron/cron.hourly
02 4 * * * busybox run-parts /system/etc/cron/cron.daily
22 4 * * 0 busybox run-parts /system/etc/cron/cron.weekly
EOF
	fi
	busybox crond -c /data/cron
fi

for i in \
`busybox find /data -iname "*.db"`; 
do \
	/system/xbin/sqlite3 $i 'VACUUM;';
	/system/xbin/sqlite3 $i 'REINDEX;';
done;

if [ -d "/dbdata" ]; then
	for i in \
	`busybox find /dbdata -iname "*.db"`; 
	do \
		/system/xbin/sqlite3 $i 'VACUUM;';
		/system/xbin/sqlite3 $i 'REINDEX;';
	done;
fi;


if [ -d "/datadata" ]; then
	for i in \
	`busybox find /datadata -iname "*.db"`; 
	do \
		/system/xbin/sqlite3 $i 'VACUUM;';
		/system/xbin/sqlite3 $i 'REINDEX;';
	done;
fi;


for i in \
`busybox find /sdcard -iname "*.db"`; 
do \
	/system/xbin/sqlite3 $i 'VACUUM;';
	/system/xbin/sqlite3 $i 'REINDEX;';
done;

LOG_FILE=/data/zipalign.log;
ZIPALIGNDB=/data/zipalign.db;

if [ -e $LOG_FILE ]; then
	rm $LOG_FILE;
fi;

if [ ! -f $ZIPALIGNDB ]; then
	touch $ZIPALIGNDB;
fi;

echo "Starting FV Automatic ZipAlign $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE;

for DIR in /system/app /data/app; do
	cd $DIR;
	for APK in *.apk; do
		if [ $APK -ot $ZIPALIGNDB ] && [ $(grep "$DIR/$APK" $ZIPALIGNDB|wc -l) -gt 0 ]; then
			echo "Already checked: $DIR/$APK" | tee -a $LOG_FILE;
		else
			ZIPCHECK=`/system/xbin/zipalign -c -v 4 $APK | grep FAILED | wc -l`;
			if [ $ZIPCHECK == "1" ]; then
				echo "Now aligning: $DIR/$APK" | tee -a $LOG_FILE;
				/system/xbin/zipalign -v -f 4 $APK /sdcard/download/$APK;
				busybox mount -o rw,remount /system;
				cp -f -p /sdcard/download/$APK $APK;
				grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB;
			else
				echo "Already aligned: $DIR/$APK" | tee -a $LOG_FILE;
				grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB;
			fi;
		fi;
	done;
done;

busybox mount -o ro,remount /system;
touch $ZIPALIGNDB;
echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE;

if [ -e /data/local/userinit.sh ];
then
   log -p i -t userinit "Executing /data/local/userinit.sh";
   logwrapper /system/bin/sh /data/local/userinit.sh;
   setprop cm.userinit.active 1;
fi;

if [ -d /data/local/userinit.d ];
then
   logwrapper busybox run-parts /data/local/userinit.d;
   setprop cm.userinit.active 1;
fi;

echo "0" > /proc/sys/net/ipv4/tcp_timestamps;
echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse;
echo "1" > /proc/sys/net/ipv4/tcp_sack;
echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle;
echo "1" > /proc/sys/net/ipv4/tcp_window_scaling;
echo "5" > /proc/sys/net/ipv4/tcp_keepalive_probes;
echo "30" > /proc/sys/net/ipv4/tcp_keepalive_intvl;
echo "30" > /proc/sys/net/ipv4/tcp_fin_timeout;
echo "404480" > /proc/sys/net/core/wmem_max;
echo "404480" > /proc/sys/net/core/rmem_max;
echo "256960" > /proc/sys/net/core/rmem_default;
echo "256960" > /proc/sys/net/core/wmem_default;
echo "4096,16384,404480" > /proc/sys/net/ipv4/tcp_wmem;
echo "4096,87380,404480" > /proc/sys/net/ipv4/tcp_rmem;
setprop ro.ril.hsxpa 2;
setprop ro.ril.gprsclass 12;
setprop ro.ril.hep 1;
setprop ro.ril.hsdpa.category 8;
setprop ro.ril.hsupa.category 6;
setprop ro.ril.def.agps.feature 1;
setprop ro.ril.def.agps.mode 2;
